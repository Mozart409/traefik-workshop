version: '3.7'
services:
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy

    volumes:
      #- /var/run/docker.sock:/var/run/docker.sock

      # Linux only
      - /var/run/user/1000/docker.sock:/var/run/docker.sock:ro
    environment:
      CONTAINERS: 1
    networks:
      - proxy

  traefik:
    depends_on:
      - socket-proxy
    image: traefik:2.6
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    networks:
      - proxy
    volumes:
      # Traefik configuration file
      - ./traefik.yml:/traefik.yml

  zipkin:
    image: openzipkin/zipkin-slim
    networks:
      - proxy
    ports:
      - 9411:9411
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.zipkin.rule=Host(`zipkin.docker.localhost`)'

  adminer:
    image: adminer:4-standalone
    labels:
      - 'traefik.enable=true'
      #  - traefik.frontend.rule=Host:db-admin.your_domain
      - 'traefik.http.routers.adminer.rule=Host(`adminer.docker.localhost`)'
      - 'traefik.http.routers.adminer.entrypoints=http'
    networks:
      - internal
      - proxy
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - internal
    labels:
      - 'traefik.enable=false'

  redis:
    image: bitnami/redis:latest
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - internal
    labels:
      - 'traefik.enable=false'
  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    scale: 3
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)'
      - 'traefik.http.routers.whoami.entrypoints=http'

  fiboservice:
    build:
      context: apps/fiboService/
      dockerfile: Dockerfile
    scale: 3
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.fiboservice.rule=Host(`fibo.docker.localhost`)'
      - 'traefik.http.routers.fiboservice.entrypoints=http'

  nextjs:
    build:
      context: apps/nextjs-redis/
      dockerfile: Dockerfile
    scale: 3
    networks:
      - proxy
      - internal
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.backend=nextjs'
      - 'traefik.http.routers.next.rule=Host(`next.docker.localhost`)'
      - 'traefik.http.routers.next.entrypoints=http'

networks:
  internal:
    external: false
  proxy:
    external: true
