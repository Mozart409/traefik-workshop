version: '3.7'
services:
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    restart: unless-stopped
    volumes:
      #- /var/run/docker.sock:/var/run/docker.sock

      # Linux only
      - /var/run/user/1000/docker.sock:/var/run/docker.sock:ro
    environment:
      CONTAINERS: 1
    networks:
      - proxy

  traefik:
    depends_on:
      - socket-proxy
    image: traefik:2.6
    ports:
      - '80:80'
      - '443:443'
      - '5432:5432'
      - '6379:6379'
      - '8080:8080'
      #- '9411:9411'
    networks:
      - proxy
    volumes:
      # Traefik configuration file
      - ./traefik.yml:/traefik.yml

  zipkin:
    image: openzipkin/zipkin-slim
    networks:
      - proxy
    ports:
      - 9411:9411
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.zipkin.rule=Host(`zipkin.docker.localhost`)'

  jaeger:
    image: jaegertracing/all-in-one:1.22.0
    ports:
      - 6831:6831/udp # accept jaeger.thrift in compact Thrift protocol used by most current Jaeger clients
      - 6832:6832/udp # accept jaeger.thrift in binary Thrift protocol used by Node.js Jaeger client (because thriftrw npm package does not support compact protocol)
      - 5775:5775/udp # accept zipkin.thrift in compact Thrift protocol (deprecated; only used by very old Jaeger clients, circa 2016)
      - 5778:5778 # serve configs, sampling strategies
      - 16686:16686 # UI port
      - 14269:14269 # collector admin port: health check at / and metrics at /metrics
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.jaeger.rule=Host(`jaeger.docker.localhost`)'

  hoppscotch:
    image: hoppscotch/hoppscotch:latest
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.hoppscotch.rule=Host(`hoppscotch.docker.localhost`)'
      - 'traefik.http.routers.hoppscotch.entrypoints=http'

  redis:
    image: bitnami/redis:6.2
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      # routers
      - 'traefik.tcp.routers.redis.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.redis.entryPoints=redis'
      - 'traefik.tcp.routers.redis.service=redis'
      # services (needed for TCP)
      - 'traefik.tcp.services.redis.loadbalancer.server.port=6379'

  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - 8001:8001
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.redisinsight.rule=Host(`redisinsight.docker.localhost`)'
      - 'traefik.http.routers.redisinsight.entrypoints=http'
    volumes:
      - redisinsight:/db

  postgres:
    image: postgres:latest
    restart: unless-stopped
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./appdata/postgres:/var/lib/postgresql/data
    labels:
      - 'traefik.enable=true'
      # routers
      - 'traefik.tcp.routers.postgres.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.postgres.entryPoints=postgres'
      - 'traefik.tcp.routers.postgres.service=postgres'
      # services (needed for TCP)
      - 'traefik.tcp.services.postgres.loadbalancer.server.port=5432'

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    scale: 3
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)'
      - 'traefik.http.routers.whoami.entrypoints=http'

  fiboservice:
    build:
      context: apps/fiboService/
      dockerfile: Dockerfile
    scale: 3
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.fiboservice.rule=Host(`fibo.docker.localhost`)'
      - 'traefik.http.routers.fiboservice.entrypoints=http'

  jaegerservice:
    build:
      context: apps/jaegerService/
      dockerfile: Dockerfile
    scale: 3
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.jaegerservice.rule=Host(`demo.docker.localhost`)'
      - 'traefik.http.routers.jaegerservice.entrypoints=http'

  nextjs:
    build:
      context: apps/nextjs-redis/
      dockerfile: Dockerfile
    scale: 3
    networks:
      - proxy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.next.rule=Host(`next.docker.localhost`)'
      - 'traefik.http.routers.next.entrypoints=http'

networks:
  proxy:
    external: true

volumes:
  redisinsight:
